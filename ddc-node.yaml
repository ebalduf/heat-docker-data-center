heat_template_version: 2016-04-08

description: >
  Heat Template to start a CentOS VM, install docker,
  and the DVPs and put it on the external network

parameters:
  flavor:
    type: string
  image:
    type: string
  ssh_key:
    type: string
  sec_groups:
    type: comma_delimited_list
    default:
    - "default"
  network:
    type: string
  public_network:
    type: string
    default: public
  root_type:
    type: string
    default: solidfire
  root_size:
    type: number
  node_name:
    type: string

resources:
  root_vol:
    type: OS::Cinder::Volume
    properties:
      volume_type: { get_param: root_type }
      image: { get_param: image }
      size: { get_param: root_size }

  wait_cloud_init_done:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: wait_handle}
      count: 1
      timeout: 900

  wait_handle:
    type: OS::Heat::WaitConditionHandle

  reboot_notify:
    type: LIB::DDC::RebootNotify
    properties:
      wait_cli: { get_attr: [wait_handle, curl_cli] }

  config_users:
    type: LIB::DDC::Users

  install_software:
    type: LIB::DDC::SoftwareInstall

  sfdvp:
    type: LIB::DDC::SfdvpInstall
    properties:
      sf_account: { get_param: node_name }

  server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: install_software }
        type: multipart
      - config: { get_resource: config_users }
        type: multipart
      - config: { get_resource: sfdvp }
        type: multipart
      - config: { get_resource: reboot_notify }
        type: multipart

  server:
    type: OS::Nova::Server
    properties:
      block_device_mapping:
        - device_name: vda
          volume_id: { get_resource: root_vol }
          delete_on_termination: false
      flavor: { get_param: flavor }
      key_name: { get_param: ssh_key }
      security_groups: { get_param: sec_groups }
      networks:
        - network: { get_param: network }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: server_init }

  floatingip:
    type: OS::Nova::FloatingIP
    properties:
      pool: { get_param: public_network }

  floatingipassoc:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floatingip }
      server_id: { get_resource: server }

outputs:
  server:
    description: Server ID
    value: { get_resource: server }
  public_ip:
    description: Server Floating IP address
    value: { get_attr: [ floatingip, ip ] }
  private_ip:
    description: Server Private IP address
    value: { get_attr: [server, networks, { get_param: network }, 0]}
  reported_ip:
    description: The IP address reported by the server once its ready
    value: { get_attr: [wait_cloud_init_done, data] }
