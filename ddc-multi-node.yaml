heat_template_version: 2016-04-08

description: >
  Heat Template to create a Docker DataCenter Cluster

parameters:
  num_masters:
    type: number
  num_dtrs:
    type: number
  num_user_nodes:
    type: number
  flavor:
    type: string
  image:
    type: string
  network:
    type: string
  root_size:
    type: number
  default_username:
    type: string
  UCP_version:
    type: string
  DTR_version:
    type: string

resources:
  key_pair:
    type: LIB::DDC::Keypair
    properties:
      prefix: { get_param: default_username }

  insert_ssh_key:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: private_key
      config: |
        #!/usr/bin/bash
        echo $private_key > /root/.ssh/id_rsa.raw 
        echo '-----BEGIN RSA PRIVATE KEY-----' > /root/.ssh/id_rsa
        sed 's/ /\n/g' /root/.ssh/id_rsa.raw | sed -n 5,29p >> /root/.ssh/id_rsa
        echo '-----END RSA PRIVATE KEY-----' >> /root/.ssh/id_rsa
        chmod 600 /root/.ssh/id_rsa /root/.ssh/id_rsa.raw

  deploy_insert_ssh:
    type: OS::Heat::SoftwareDeployment
    depends_on: DDC_master_group
    properties:
      config:
        get_resource: insert_ssh_key
      server:
        { get_attr: [ DDC_master_group, resource.0.server ] }
      input_values:
        private_key: { get_attr: [ key_pair, private_key ] }

  install_ddc:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: user
      - name: the_masters
      - name: the_DTRs
      - name: the_usernodes
      - name: DTRnode_names
      - name: cluster_name
      - name: UCP_version
      - name: DTR_version
      config: 
        get_file: ddc-config.sh

  deploy_ddc:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy_insert_ssh
    depends_on: DDC_master_group
    depends_on: DDC_DTR_group
    depends_on: DDC_user_nodes
    properties:
      config:
        get_resource: install_ddc
      server:
        { get_attr: [ DDC_master_group, resource.0.server ] }
      input_values:
        user: { get_param: default_username }
        the_masters: { get_attr: [ DDC_master_group, public_ip ] }
        the_DTRs: { get_attr: [ DDC_DTR_group, public_ip ] }
        the_usernodes: { get_attr: [ DDC_user_nodes, public_ip ] }
        DTRnode_names: { get_attr: [ DDC_DTR_group, servername ] }
        cluster_name: { get_param: 'OS::stack_name' }
        UCP_version: { get_param: UCP_version }
        DTR_version: { get_param: DTR_version }

  ddc_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        str_replace:
          params:
            __prefix__: "sg"
            __id__: { get_param: "OS::stack_name" }
          template: __id__-__prefix__
      description: Ports for DDC
      rules:
      - protocol: tcp
        port_range_min: 1
        port_range_max: 65535
      - protocol: udp
        port_range_min: 1
        port_range_max: 65535

  DDC_DTR_group:
    type: OS::Heat::ResourceGroup
    depends_on: ddc_sg
    properties:
      count: { get_param: num_dtrs }
      resource_def:
          type: ddc-node.yaml
          properties:
            flavor: { get_param: flavor }
            image: { get_param: image }
            ssh_key: { get_attr: [ key_pair, name ] }
            sec_groups:
            - "default"
            - str_replace:
                 params:
                   __prefix__: "sg"
                   __id__: { get_param: "OS::stack_name" }
                 template: __id__-__prefix__
            network: { get_param: network }
            root_size: { get_param: root_size }
            server_name:
              str_replace:
                 params:
                    __type__: "dtr"
                    __id__: { get_param: "OS::stack_name" }
                    __index__: "%index%"
                 template: __id__-__type__-__index__

  DDC_master_group:
    type: OS::Heat::ResourceGroup
    depends_on: ddc_sg
    properties:
      count: { get_param: num_masters }
      resource_def:
          type: ddc-node.yaml
          properties:
            flavor: { get_param: flavor }
            image: { get_param: image }
            ssh_key: { get_attr: [ key_pair, name ] }
            sec_groups:
            - "default"
            - str_replace:
                 params:
                   __prefix__: "sg"
                   __id__: { get_param: "OS::stack_name" }
                 template: __id__-__prefix__
            network: { get_param: network }
            root_size: { get_param: root_size }
            server_name:
              str_replace:
                 params:
                    __type__: "master"
                    __id__: { get_param: "OS::stack_name" }
                    __index__: "%index%"
                 template: __id__-__type__-__index__

  DDC_user_nodes:
    type: OS::Heat::ResourceGroup
    depends_on: ddc_sg
    properties:
      count: { get_param: num_user_nodes }
      resource_def:
          type: ddc-node.yaml
          properties:
            flavor: { get_param: flavor }
            image: { get_param: image }
            ssh_key: { get_attr: [ key_pair, name ] }
            sec_groups: 
            - "default"
            - str_replace:
                 params:
                   __prefix__: "sg"
                   __id__: { get_param: "OS::stack_name" }
                 template: __id__-__prefix__
            network: { get_param: network }
            root_size: { get_param: root_size }
            server_name:
              str_replace:
                 params:
                    __type__: "user"
                    __id__: { get_param: "OS::stack_name" }
                    __index__: "%index%"
                 template: __id__-__type__-__index__

outputs:
 master_ip:
    value: { get_attr: [ DDC_master_group, public_ip] }
 DTR_ips:
    value: { get_attr: [ DDC_DTR_group, public_ip] }
 user_node_ips:
    value: { get_attr: [ DDC_user_nodes, public_ip] }
 public_key:
    value: { get_attr: [ key_pair, public_key ] }
