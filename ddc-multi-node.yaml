heat_template_version: 2016-04-08

description: >
  Heat Template to create a Docker DataCenter Cluster

parameters:
  num_masters:
    type: number
  num_dtrs:
    type: number
  num_user_nodes:
    type: number
  flavor:
    type: string
  image:
    type: string
  network:
    type: string
  root_size:
    type: number
  default_username:
    type: string
  UCP_version:
    type: string
  DTR_version:
    type: string

resources:
  key_pair:
    type: LIB::DDC::Keypair
    properties:
      prefix: { get_param: default_username }

  insert_ssh_key:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: private_key
      config: |
        #!/usr/bin/bash
        echo $private_key > /root/.ssh/id_rsa.raw 
        echo '-----BEGIN RSA PRIVATE KEY-----' > /root/.ssh/id_rsa
        sed 's/ /\n/g' /root/.ssh/id_rsa.raw | sed -n 5,29p >> /root/.ssh/id_rsa
        echo '-----END RSA PRIVATE KEY-----' >> /root/.ssh/id_rsa
        chmod 600 /root/.ssh/id_rsa /root/.ssh/id_rsa.raw

  deploy_insert_ssh:
    type: OS::Heat::SoftwareDeployment
    depends_on: DDC_master_group
    properties:
      config:
        get_resource: insert_ssh_key
      server:
        { get_attr: [ DDC_master_group, resource.0.server ] }
      input_values:
        private_key: { get_attr: [ key_pair, private_key ] }

  install_ddc:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: user
      - name: the_masters
      - name: the_DTRs
      - name: the_usernodes
      - name: DTRnode_names
      - name: cluster_name
      - name: UCP_version
      - name: DTR_version
      config: |
        #!/usr/bin/bash
        set -x
        PRIVATE_IP=$(curl -fsSL http://169.254.169.254/latest/meta-data/local-ipv4)
        PUBLIC_IP=$(curl -fsSL http://169.254.169.254/latest/meta-data/public-ipv4)
        docker plugin install store/netapp/ndvp-plugin:1.4.0 --alias netapp --grant-all-permissions
        # get our docker license key
        curl http://172.27.156.236:8080/v1/AUTH_7ce1fcab9a1b4b4d8dc573d5e6aa9263/Docker/license1.lic -o /root/license1.lic
        docker run --rm -i --name ucp -v /var/run/docker.sock:/var/run/docker.sock -v /root/license1.lic:/config/docker_subscription.lic docker/ucp:${UCP_version} install --host-address $PRIVATE_IP --san $PUBLIC_IP --admin-username admin --admin-password solidfire
        docker swarm join-token manager | tail -n +3 > /tmp/manager_join
        docker swarm join-token worker | tail -n +3 > /tmp/worker_join
        chmod 700 /tmp/manager_join /tmp/worker_join
        for master in `echo $the_masters | sed 's|\[||g;s|]||g;s|u'\''||g;s|'\''||g;s| ||g;s|,|\n|g' | grep -v $PUBLIC_IP`; do
          echo "Connecting DDC master node: " $master
          scp -o StrictHostKeyChecking=no /tmp/manager_join $user@$master:/tmp/manager_join
          ssh -o StrictHostKeyChecking=no $user@$master 'chmod 700 /tmp/manager_join;sudo chown root.root /tmp/manager_join; 
                                                         sudo chown root.root /tmp/manager_join;
                                                         sudo bash /tmp/manager_join;
                                                         docker plugin install store/netapp/ndvp-plugin:1.4.0 --alias netapp --grant-all-permissions '
        done
        for dtr in `echo $the_DTRs | sed 's|\[||g;s|]||g;s|u'\''||g;s|'\''||g;s| ||g;s|,|\n|g'`; do
          echo "Connecting DDC DTR node: " $dtr
          scp -o StrictHostKeyChecking=no /tmp/worker_join $user@$dtr:/tmp/worker_join
          ssh -o StrictHostKeyChecking=no $user@$dtr 'chmod 700 /tmp/worker_join;sudo chown root.root /tmp/worker_join; 
                                                      sudo chown root.root /tmp/worker_join;
                                                      sudo bash /tmp/worker_join;
                                                      docker plugin install store/netapp/ndvp-plugin:1.4.0 --alias netapp --grant-all-permissions '
        done
        for usernode in `echo $the_usernodes | sed 's|\[||g;s|]||g;s|u'\''||g;s|'\''||g;s| ||g;s|,|\n|g'`; do
          echo "Connecting DDC User node: " $usernode
          scp -o StrictHostKeyChecking=no /tmp/worker_join $user@$usernode:/tmp/worker_join
          ssh -o StrictHostKeyChecking=no $user@$usernode 'chmod 700 /tmp/worker_join;sudo chown root.root /tmp/worker_join; 
                                                           sudo chown root.root /tmp/worker_join;
                                                           sudo bash /tmp/worker_join;
                                                           docker plugin install store/netapp/ndvp-plugin:1.4.0 --alias netapp --grant-all-permissions '
        done
        REPLICA_ID=$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 12)
        # seems like we need to wait a bit for things to be ready.
        sleep 20
        DTR_MASTER=$(echo $DTRnode_names | sed 's|\[||g;s|]||g;s|u'\''||g;s|'\''||g;s| ||g;s|,|\n|g' | head -1)
        docker run --rm docker/dtr:${DTR_version} install --dtr-external-url https://$DTR_MASTER.pm.solidfire.net --ucp-node $DTR_MASTER.pm.solidfire.net -ucp-username admin --ucp-password solidfire --ucp-insecure-tls --ucp-url https://$(hostname) --replica-id ${REPLICA_ID}
        for dtrn in `echo $DTRnode_names | sed 's|\[||g;s|]||g;s|u'\''||g;s|'\''||g;s| ||g;s|,|\n|g' | tail -n +2`; do
          echo "Installing DTR on node: " $dtrn
          docker run --rm docker/dtr:${DTR_version} join --ucp-node $dtrn.pm.solidfire.net -ucp-username admin --ucp-password solidfire --ucp-insecure-tls --ucp-url https://$(hostname) --existing-replica-id ${REPLICA_ID}
        done

  deploy_ddc:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy_insert_ssh
    depends_on: DDC_master_group
    depends_on: DDC_DTR_group
    depends_on: DDC_user_nodes
    properties:
      config:
        get_resource: install_ddc
      server:
        { get_attr: [ DDC_master_group, resource.0.server ] }
      input_values:
        user: { get_param: default_username }
        the_masters: { get_attr: [ DDC_master_group, public_ip ] }
        the_DTRs: { get_attr: [ DDC_DTR_group, public_ip ] }
        the_usernodes: { get_attr: [ DDC_user_nodes, public_ip ] }
        DTRnode_names: { get_attr: [ DDC_DTR_group, servername ] }
        cluster_name: { get_param: 'OS::stack_name' }
        UCP_version: { get_param: UCP_version }
        DTR_version: { get_param: DTR_version }

  ddc_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        str_replace:
          params:
            __prefix__: "sg"
            __id__: { get_param: "OS::stack_name" }
          template: __id__-__prefix__
      description: Ports for DDC
      rules:
      - protocol: tcp
        port_range_min: 1
        port_range_max: 65535
      - protocol: udp
        port_range_min: 1
        port_range_max: 65535

  DDC_DTR_group:
    type: OS::Heat::ResourceGroup
    depends_on: ddc_sg
    properties:
      count: { get_param: num_dtrs }
      resource_def:
          type: ddc-node.yaml
          properties:
            flavor: { get_param: flavor }
            image: { get_param: image }
            ssh_key: { get_attr: [ key_pair, name ] }
            sec_groups:
            - "default"
            - str_replace:
                 params:
                   __prefix__: "sg"
                   __id__: { get_param: "OS::stack_name" }
                 template: __id__-__prefix__
            network: { get_param: network }
            root_size: { get_param: root_size }
            server_name:
              str_replace:
                 params:
                    __type__: "dtr"
                    __id__: { get_param: "OS::stack_name" }
                    __index__: "%index%"
                 template: __id__-__type__-__index__

  DDC_master_group:
    type: OS::Heat::ResourceGroup
    depends_on: ddc_sg
    properties:
      count: { get_param: num_masters }
      resource_def:
          type: ddc-node.yaml
          properties:
            flavor: { get_param: flavor }
            image: { get_param: image }
            ssh_key: { get_attr: [ key_pair, name ] }
            sec_groups:
            - "default"
            - str_replace:
                 params:
                   __prefix__: "sg"
                   __id__: { get_param: "OS::stack_name" }
                 template: __id__-__prefix__
            network: { get_param: network }
            root_size: { get_param: root_size }
            server_name:
              str_replace:
                 params:
                    __type__: "master"
                    __id__: { get_param: "OS::stack_name" }
                    __index__: "%index%"
                 template: __id__-__type__-__index__

  DDC_user_nodes:
    type: OS::Heat::ResourceGroup
    depends_on: ddc_sg
    properties:
      count: { get_param: num_user_nodes }
      resource_def:
          type: ddc-node.yaml
          properties:
            flavor: { get_param: flavor }
            image: { get_param: image }
            ssh_key: { get_attr: [ key_pair, name ] }
            sec_groups: 
            - "default"
            - str_replace:
                 params:
                   __prefix__: "sg"
                   __id__: { get_param: "OS::stack_name" }
                 template: __id__-__prefix__
            network: { get_param: network }
            root_size: { get_param: root_size }
            server_name:
              str_replace:
                 params:
                    __type__: "user"
                    __id__: { get_param: "OS::stack_name" }
                    __index__: "%index%"
                 template: __id__-__type__-__index__

outputs:
 master_ip:
    value: { get_attr: [ DDC_master_group, public_ip] }
 DTR_ips:
    value: { get_attr: [ DDC_DTR_group, public_ip] }
 user_node_ips:
    value: { get_attr: [ DDC_user_nodes, public_ip] }
 public_key:
    value: { get_attr: [ key_pair, public_key ] }
